#include <bits/stdc++.h>
using namespace std;

int main() {
    int N, M;
    cin >> N >> M;

    if (M != N) {
        cout << "No\n";
        return 0;
    }

    vector<vector<int>> adj(N + 1);
    vector<int> degree(N + 1, 0);

    for (int i = 0; i < M; ++i) {
        int a, b;
        cin >> a >> b;
        adj[a].push_back(b);
        adj[b].push_back(a);
        degree[a]++;
        degree[b]++;
    }

    for (int i = 1; i <= N; ++i) {
        if (degree[i] != 2) {
            cout << "No\n";
            return 0;
        }
    }

    // BFS to check connectivity
    vector<bool> visited(N + 1, false);
    queue<int> q;
    q.push(1);
    visited[1] = true;

    while (!q.empty()) {
        int u = q.front(); q.pop();
        for (int v : adj[u]) {
            if (!visited[v]) {
                visited[v] = true;
                q.push(v);
            }
        }
    }

    for (int i = 1; i <= N; ++i) {
        if (!visited[i]) {
            cout << "No\n";
            return 0;
        }
    }

    cout << "Yes\n";
}
